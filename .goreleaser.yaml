# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=jcroql
version: 2

snapshot:
  version_template: "{{ incpatch .Version }}-alpha"

# Ref: https://goreleaser.com/customization/builds/
project_name: nanoid

builds:
  # Ref: https://goreleaser.com/errors/no-main/#if-you-are-building-a-library
  - skip: true

# Ref: https://goreleaser.com/customization/changelog/
changelog:
  # Sorts the changelog by the commit's messages.
  # Could either be asc, desc or empty
  # Empty means 'no sorting', it'll use the output of `git log` as is.
  sort: asc

  # Changelog generation implementation to use.
  #
  # Valid options are:
  # - `git`: uses `git log`;
  # - `github`: uses the compare GitHub API, appending the author username to the changelog.
  # - `gitlab`: uses the compare GitLab API, appending the author name and email to the changelog (requires a personal access token).
  # - `gitea`: uses the compare Gitea API, appending the author username to the changelog.
  # - `github-native`: uses the GitHub release notes generation API, disables the groups feature.
  #
  # Default: 'git'.
  use: github

  # Max commit hash length to use in the changelog.
  #
  # 0: use whatever the changelog implementation gives you
  # -1: remove the commit hash from the changelog
  # any other number: max length.
  abbrev: 0

  filters:
    # Commit messages matching the regexp listed here will be the only ones
    # added to the changelog
    #
    # If include is not-empty, exclude will be ignored.
    #
    # Matches are performed against the first line of the commit message only,
    # prefixed with the commit SHA1, usually in the form of
    # `<abbrev-commit>[:] <title-commit>`.
    include:
      - "(?i)^feature:"
      - "(?i)^defect:"
      - "(?i)^debt:"
      - "(?i)^risk:"

  # Group commits messages by given regex and title.
  # Order value defines the order of the groups.
  # Providing no regex means all commits will be grouped under the default group.
  #
  # Matches are performed against the first line of the commit message only,
  # prefixed with the commit SHA1, usually in the form of
  # `<abbrev-commit>[:] <title-commit>`.
  # Groups are disabled when using github-native, as it already groups things by itself.
  # Regex use RE2 syntax as defined here: https://github.com/google/re2/wiki/Syntax.
  groups:
    - title: "üéâ Features"
      regexp: '(?i)^.*?feature(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: "üêõ Defects"
      regexp: '(?i)^.*?defect(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: "üõ† Technical Debt"
      regexp: '(?i)^.*?debt(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: "üöÄ Technical Risk"
      regexp: '(?i)^.*?risk(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: Others
      order: 999

# Ref: https://goreleaser.com/customization/checksums/
checksum:
  name_template: 'checksums.txt'

# Ref: https://goreleaser.com/customization/sign/
signs:
  - id: src-archive
    cmd: cosign
    stdin: '{{ .Env.COSIGN_PASSWORD }}'
    output: true
    artifacts: archive
    args:
      - sign-blob
      - --yes
      - --key
      - env://COSIGN_PRIVATE_KEY
      - '--output-certificate=${certificate}'
      - '--output-signature=${signature}'
      - '${artifact}'

  - id: checksums
    cmd: cosign
    stdin: '{{ .Env.COSIGN_PASSWORD }}'
    output: true
    artifacts: checksum
    args:
      - sign-blob
      - --yes
      - --key
      - env://COSIGN_PRIVATE_KEY
      - '--output-certificate=${certificate}'
      - '--output-signature=${signature}'
      - '${artifact}'

# Ref: https://goreleaser.com/customization/archive/
archives:
  - id: src

    # Archive format.
    #
    # If format is `binary`, no archives are created and the binaries are instead
    # uploaded directly.
    #
    # Valid options are:
    # - `tar.gz`
    # - `tgz`
    # - `tar.xz`
    # - `txz`
    # - `tar.zst`
    # - `tzst` (since v2.1)
    # - `tar`
    # - `gz`
    # - `zip`
    # - `binary`
    #
    # Default: 'tar.gz'.
    formats: [tar.gz]

    # Additional files/globs you want to add to the archive.
    #
    # Default: [ 'LICENSE*', 'README*', 'CHANGELOG', 'license*', 'readme*', 'changelog'].
    # Templates: allowed.
    files:
      - go.mod
      - go.sum
      - LICENSE
      - README.md
      - CHANGELOG/CHANGELOG*
      - "**/*.go"

    # Archive name.
    #
    # Default:
    # - if format is `binary`:
    #   - `{{ .Binary }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}{{ with .Mips }}_{{ . }}{{ end }}{{ if not (eq .Amd64 "v1") }}{{ .Amd64 }}{{ end }}`
    # - if format is anything else:
    #   - `{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}{{ with .Mips }}_{{ . }}{{ end }}{{ if not (eq .Amd64 "v1") }}{{ .Amd64 }}{{ end }}`
    # Templates: allowed.
    name_template: "{{ .ProjectName }}_{{ .Version }}_source"

sboms:
  - artifacts: archive

# Ref: https://goreleaser.com/customization/release/
release:
  # Repo in which the release will be created.
  # Default: extracted from the origin remote URL or empty if its private hosted.
  github:
    owner: sixafter
    name: nanoid

  # You can change the name of the release.
  #
  # Default: '{{.Tag}}' ('{{.PrefixedTag}}' on Pro).
  # Templates: allowed.
  name_template: 'v{{ .Version }}'

  # Footer for the release body.
  #
  # Templates: allowed.
  footer: |
    **Full Changelog**: [CHANGELOG](https://github.com/sixafter/nanoid/tree/main/CHANGELOG/CHANGELOG-1.x.md)
        
    ## Where to go next?
    
    * To determine the practical length for a NanoID, see the collision time calculator [here](https://sixafter.github.io/nanoid/).
